# -*- coding: utf-8 -*-
"""GPTfromScratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDH52REY48fdL7Fs3fYPACdkR3zuxuo4
"""
import torch
import torch.nn as nn
from torch.nn import functional as F


# Hyperparameters
torch.manual_seed(1337)
batch_size = 4 # how many INDEPENDENT sequences will we process in parallel?
block_size = 8 # what is the maximum context length for predictions?
embedding_size = 32
train_val_split = 0.9
eval_iters = 100
max_iters = 5000
eval_interval = 500
learning_rate = 3e-4

# GPU
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(device)

# Raw Data loading
with open('../data/input.txt', 'r', encoding='utf-8') as f:
    text = f.read()

chars = sorted(list(set(text)))
vocab_size = len(chars)


# Simple Word Embeddings with encoding and decoding
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s]
decode = lambda l: ''.join([itos[i] for i in l])


# Data Preprocessing
data = torch.tensor(encode(text), dtype=torch.long)
train_size = int(len(data)*train_val_split)
train_data = data[:train_size]
val_data = data[train_size:]


# Helper functions
def get_batch(split):
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,))
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  x, y = x.to(device), y.to(device)
  return x, y

@torch.no_grad()
def evaluate_loss():
  out = {}
  m.eval()
  for split in ['train', 'val']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
      X, Y = get_batch(split)
      logits, loss = m(X, Y)
      losses[k] = loss.item()
    out[split] = losses.mean()
  m.train()
  return out


# Model
class BigramLanguageModel(nn.Module):
  def __init__(self, vocab_size):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size, embedding_size)
    self.lm_head = nn.Linear(embedding_size, vocab_size)

  def forward(self, idx, targets=None):
    tok_emb = self.token_embedding_table(idx) # B x T x embedding_size
    logits = self.lm_head(tok_emb) # (B,T,vocab_size)

    if targets is None:
      loss = None
    else:
      B, T, C = logits.shape
      logits = logits.view(B*T, C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)
    return logits, loss

  def generate(self, idx, max_new_tokens=50):
    for _ in range(max_new_tokens):
      logits, loss = self(idx)
      logits = logits[:, -1, :]
      probs = F.softmax(logits, dim=-1)
      idx_next = torch.multinomial(probs, num_samples=1)
      idx = torch.cat((idx, idx_next), dim=1)
    return idx

# Model Initialization
m = BigramLanguageModel(vocab_size)
m = m.to(device)


# Optimizer Initialization
optm = torch.optim.AdamW(m.parameters(), lr=learning_rate)


# Training loop
for iter in range(max_iters):
    if iter % eval_interval == 0:
        losses = evaluate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

    xb, yb = get_batch("train")

    logits, loss = m(xb, yb)
    optm.zero_grad(set_to_none=True)
    loss.backward()
    optm.step()


# Output generation 
context = torch.zeros((1,1), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))